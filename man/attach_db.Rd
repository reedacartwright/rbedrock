% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/R6.R
\name{attach_db}
\alias{attach_db}
\alias{local_db}
\alias{with_db}
\alias{the_db}
\title{Attach a bedrockdb globally}
\usage{
attach_db(db)

local_db(db, .frame = caller_env())

with_db(.expr, db)

the_db()
}
\arguments{
\item{db}{A \code{bedrockdb}.}

\item{.frame}{The environment of a stack frame which defines the
scope of the temporary options. When the frame returns, the
options are set back to their original values.}

\item{.expr}{An expression to evaluate with temporary db.}
}
\description{
\itemize{
\item \code{attach_db()} assigns a \code{bedrockdb} to a global variable. This global
variable will be used as the default \code{db} for functions that load and
store values if their \code{db} argument is missing.
\item \code{the_db()} returns the current default db.
\item \code{local_db()} temporarily sets \code{the_db} for the duration of a stack
frame (by default the current one). \code{the_db} is set back to its
old value when the frame returns.
\item \code{with_db()} changes \code{the_db} while an expression is
evaluated. \code{db} is restored when the expression returns.
}
}
\examples{
# Load database
dbpath <- rbedrock_example_world("example1.mcworld")
db <- bedrockdb(dbpath)

\dontrun{
# This will fail because no db is specified.
keys <- get_keys()
}
# Attach a default db for database commands.
attach_db(db)

# Get all keys. (This now works.)
keys <- get_keys()

# Detach it.
attach_db()

# Use local_db to attach a db locally inside a function
f <- function(db) {
  local_db(db)
  get_keys()
}

# Evaluate an expression with a db attached temporarily.
with_db(get_keys(), db = db)

# Clean up.
close(db)
fs::dir_delete(dbpath)

}
