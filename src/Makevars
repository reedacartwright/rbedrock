uname_S := $(shell sh -c 'uname -s 2>/dev/null || echo not')

CXX_STD = CXX11
PKG_CFLAGS = $(C_VISIBILITY)
PKG_CXXFLAGS = $(CXX_VISIBILITY)
PKG_CPPFLAGS = -pthread -I./leveldb-mcpe/include -I./leveldb-mcpe/build/include
PKG_LIBS = -L./leveldb-mcpe/build -pthread -lleveldb -lz

CMAKE = cmake

ifeq ($(uname_S),Darwin)
	# Assume that on MacOS the compiler is in this format: clang -mmacosx-version-min=10.13
	CMAKE_CC = $(shell sh -c 'echo $0' $(CC))
	CMAKE_CXX = $(shell sh -c 'echo $0' $(CXX))
	CMAKE_EXTRA_ARGS = -DCMAKE_OSX_DEPLOYMENT_TARGET=$(shell sh -c 'echo ${1#-mmacosx-version-min=}' $(CXX))
else
	CMAKE_CC = $(CC)
	CMAKE_CXX = $(CXX11)
endif

all: $(SHLIB)

$(SHLIB): leveldb-mcpe/build/libleveldb.a

leveldb-mcpe/build/Makefile: leveldb-mcpe/CMakeLists.txt
	(mkdir -p leveldb-mcpe/build \
		&& cd leveldb-mcpe/build \
		&& $(CMAKE) -G "Unix Makefiles" .. \
			-DCMAKE_MAKE_PROGRAM="$(MAKE)" \
			-DCMAKE_CXX_COMPILER="$(CXX11)" \
			-DCMAKE_C_COMPILER="$(CMAKE_CC)" \
			-DCMAKE_CXX_FLAGS_RELEASE_INIT="$(CXX11STD) $(CXX11FLAGS)" \
			-DCMAKE_C_FLAGS_RELEASE_INIT="$(CFLAGS)" \
			$(CMAKE_EXTRA_ARGS) \
			-DCMAKE_BUILD_TYPE=Release \
			-DLEVELDB_BUILD_TESTS=OFF \
			-DLEVELDB_BUILD_BENCHMARKS=OFF \
			-DCMAKE_POSITION_INDEPENDENT_CODE=ON \
			-Wno-dev )

leveldb-mcpe/build/libleveldb.a: leveldb-mcpe/build/Makefile
	$(MAKE) --directory=leveldb-mcpe/build

clean:
	$(MAKE) --directory=leveldb-mcpe/build clean
